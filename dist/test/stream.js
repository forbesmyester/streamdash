"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const stream_1 = require("../src/stream");
function aReduce(f, acc, xs, next) {
    let myXs = xs.concat([]);
    let initiator = () => {
        if (myXs.length == 0) {
            return next(null, acc);
        }
        f(acc, myXs.shift(), (err, newAcc) => {
            if (err) {
                return next(err);
            }
            acc = newAcc;
            initiator();
        });
    };
    initiator();
}
let getThingLetters = () => {
    return [
        { name: "A", type: "Letter" },
        { name: "B", type: "Letter" },
        { name: "C", type: "Letter" },
        { name: "D", type: "Letter" },
        { name: "E", type: "Letter" }
    ];
};
let getThingNumbers = () => {
    return [
        { name: "1", type: "Number" },
        { name: "2", type: "Number" },
        { name: "3", type: "Number" },
        { name: "4", type: "Number" },
        { name: "5", type: "Number" }
    ];
};
class Outer extends stream_1.Writable {
    constructor() {
        super(...arguments);
        this.out = [];
    }
    _write(thing, encoding, cb) {
        this.out.push(thing);
        cb();
    }
    get() {
        return this.out;
    }
}
ava_1.default('Collector (non error)', function (tst) {
    let src = new stream_1.ArrayReadable([
        { name: "Matt", type: "Human" },
        { name: "Pluto", type: "Dog" }
    ]);
    return stream_1.streamDataCollector(src).then((things) => {
        tst.deepEqual(things, [{ name: "Matt", type: "Human" }, { name: "Pluto", type: "Dog" }]);
    });
});
ava_1.default.cb('Can convert an array into a stream', function (tst) {
    let src = new stream_1.ArrayReadable([
        { name: "Matt", type: "Human" },
        { name: "Pluto", type: "Dog" }
    ]);
    let dst = new Outer({ objectMode: true });
    src.pipe(dst);
    dst.on('finish', () => {
        tst.is(dst.get().length, 2);
        tst.end();
    });
});
ava_1.default.cb('Can filter', function (tst) {
    let src = new stream_1.ArrayReadable(getThingLetters());
    let filter = new stream_1.FilterTransform({ objectMode: true }, (a, cb) => {
        if (a.name == 'C') {
            return cb(null, false);
        }
        cb(null, true);
    });
    let dst = new Outer({ objectMode: true });
    let rejected = new Outer({ objectMode: true });
    src.pipe(filter).pipe(dst);
    filter.getRejectedReader().pipe(rejected);
    let done = [];
    let doneHandler = (typ) => {
        done.push(typ);
        if (done.length < 2) {
            return;
        }
        tst.true(done.indexOf('dst') > -1);
        tst.true(done.indexOf('rejected') > -1);
        tst.end();
    };
    rejected.on('finish', () => {
        tst.deepEqual(rejected.get(), [{ name: "C", type: "Letter" }]);
        doneHandler('rejected');
    });
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), [
            { name: "A", type: "Letter" },
            { name: "B", type: "Letter" },
            { name: "D", type: "Letter" },
            { name: "E", type: "Letter" }
        ]);
        doneHandler('dst');
    });
});
ava_1.default.cb('Has an ErrorStream', (tst) => {
    let src = new stream_1.ArrayReadable(getThingLetters());
    let filter1 = new stream_1.FilterTransform({ objectMode: true }, (a, cb) => {
        if (a.name == 'B') {
            return cb(new Error("It is B"));
        }
        cb(null, true);
    });
    let filter2 = new stream_1.FilterTransform({ objectMode: true }, (a, cb) => {
        if (a.name == 'D') {
            return cb(new Error("It is D"));
        }
        cb(null, true);
    });
    let dst = new Outer({ objectMode: true });
    let eDst = new Outer({ objectMode: true });
    src.pipe(filter1).pipe(filter2).pipe(dst);
    let es = new stream_1.ErrorStream({ objectMode: true, len: 1 });
    es.add(filter1);
    es.add(filter2);
    es.pipe(eDst);
    let done = [];
    let doneHandler = (typ) => {
        done.push(typ);
        if (done.length < 2) {
            return;
        }
        tst.true(done.indexOf('pipe') > -1);
        tst.true(done.indexOf('errors') > -1);
        tst.end();
    };
    eDst.on('finish', () => {
        tst.deepEqual(eDst.get().map(e => e.message), ['It is B', 'It is D']);
        doneHandler('errors');
    });
    dst.on('finish', () => {
        let expected = [
            { name: "A", type: "Letter" },
            { name: "C", type: "Letter" },
            { name: "E", type: "Letter" }
        ];
        tst.deepEqual(dst.get(), expected);
        doneHandler('pipe');
    });
});
ava_1.default.cb('Can Collect', (tst) => {
    let src = new stream_1.ArrayReadable(getThingNumbers());
    let collector = new stream_1.CollectorTransform({ objectMode: true });
    let dst = new Outer({ objectMode: true });
    src.pipe(collector).pipe(dst);
    dst.on('finish', () => {
        tst.is(dst.get().length, 1);
        tst.deepEqual(dst.get(), [[
                { name: "1", type: "Number" },
                { name: "2", type: "Number" },
                { name: "3", type: "Number" },
                { name: "4", type: "Number" },
                { name: "5", type: "Number" }
            ]]);
        tst.end();
    });
});
ava_1.default.cb('Can Scan', function (tst) {
    let src = new stream_1.ArrayReadable(getThingNumbers());
    let scan = new stream_1.ScanTransform((acc, a, cb) => { cb(null, { n: acc.n + parseInt(a.name, 10) }); }, { n: 2 }, { objectMode: true });
    let dst = new Outer({ objectMode: true });
    src.pipe(scan).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), [
            { n: 3 },
            { n: 5 },
            { n: 8 },
            { n: 12 },
            { n: 17 }
        ]);
        tst.end();
    });
});
ava_1.default.cb('Can Map', function (tst) {
    let src = new stream_1.ArrayReadable(getThingNumbers());
    let map = new stream_1.MapTransform((a, cb) => {
        cb(null, { name: parseInt(a.name, 10), type: a.type });
    }, { objectMode: true });
    let dst = new Outer({ objectMode: true });
    src.pipe(map).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), [
            { name: 1, type: "Number" },
            { name: 2, type: "Number" },
            { name: 3, type: "Number" },
            { name: 4, type: "Number" },
            { name: 5, type: "Number" }
        ]);
        tst.end();
    });
});
ava_1.default.cb('Can Final', function (tst) {
    let src = new stream_1.ArrayReadable(getThingNumbers());
    let sort = new stream_1.FinalDuplex({ objectMode: true });
    let dst = new Outer({ objectMode: true });
    src.pipe(sort).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), [{ name: "5", type: "Number" }]);
        tst.end();
    });
});
ava_1.default.cb('Can Sort', function (tst) {
    let src = new stream_1.ArrayReadable(getThingNumbers().reverse());
    let sort = new stream_1.SortDuplex((a, b) => {
        return parseInt(a.name, 10) - parseInt(b.name, 10);
    }, { objectMode: true });
    let dst = new Outer({ objectMode: true });
    src.pipe(sort).pipe(dst);
    dst.on('finish', () => {
        tst.deepEqual(dst.get(), [
            { name: "1", type: "Number" },
            { name: "2", type: "Number" },
            { name: "3", type: "Number" },
            { name: "4", type: "Number" },
            { name: "5", type: "Number" }
        ]);
        tst.end();
    });
});
ava_1.default('RightAfterLeft extends Joiner', function (tst) {
    let mapper = (leftValues, rightValue) => {
        let leftVal = leftValues
            .reduce((acc, lv) => { return acc + lv.n; }, 0);
        let v = rightValue.n + leftVal;
        if (v == 10) {
            return null;
        }
        return { n: v };
    };
    let leftSrc = new stream_1.ArrayReadable([
        { n: 1, dir: 'left' },
        { n: 2, dir: 'left' },
        { n: 3, dir: 'left' }
    ]), rightSrc = new stream_1.ArrayReadable([
        { n: 5, dir: 'right' },
        { n: 4, dir: 'right' },
        { n: 3, dir: 'right' }
    ]), joiner = new stream_1.RightAfterLeft(mapper);
    leftSrc.pipe(joiner.left);
    rightSrc.pipe(joiner.right);
    return stream_1.streamDataCollector(joiner)
        .then((adds) => {
        tst.deepEqual(adds, [{ n: 11 }, { n: 9 }]);
        tst.is(joiner['rightBuffer'].length, 0);
        tst.is(joiner['leftBuffer'].length, 0);
    })
        .catch((e) => {
        throw e;
    });
});
//# sourceMappingURL=data:application/json;base64,